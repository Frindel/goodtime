import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS localSession (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    startTimestamp INTEGER NOT NULL,
    endTimestamp INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    labelName TEXT DEFAULT NULL,
    notes TEXT DEFAULT NULL,
    isWork INTEGER AS Boolean NOT NULL DEFAULT 1,
    isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
    FOREIGN KEY(labelName, isArchived) REFERENCES localLabel(name, isArchived)
    ON UPDATE CASCADE
    ON DELETE SET DEFAULT
);

CREATE INDEX idx_archived ON localSession(isArchived);
CREATE INDEX idx_profile ON localSession(labelName);
CREATE INDEX idx_is_work ON localSession(isWork);

insert:
INSERT OR REPLACE INTO localSession(id, startTimestamp, endTimestamp, duration, labelName, notes, isWork, isArchived)
VALUES(NULL, ?, ?, ?, ?, ?, ?, ?);

update:
UPDATE localSession
SET startTimestamp = :newStartTimestamp, endTimestamp = :newEndTimestamp, duration = :newDuration, labelName = :newLabel, notes = :newNotes
WHERE id = :id;

selectAll:
SELECT *
FROM localSession  ORDER BY endTimestamp DESC;

selectById:
SELECT *
FROM localSession WHERE id = ?;

selectByIsArchived:
SELECT *
FROM localSession WHERE isArchived IS ? ORDER BY endTimestamp DESC;

selectByLabel:
SELECT *
FROM localSession WHERE labelName IS ? ORDER BY endTimestamp DESC;

selectLastInsertSessionId:
SELECT last_insert_rowid();

delete:
DELETE FROM localSession
WHERE id = ?;

deleteAll:
DELETE FROM localSession;