import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS localSession (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    interruptions INTEGER NOT NULL,
    labelName TEXT NOT NULL DEFAULT "PRODUCTIVITY_DEFAULT_LABEL",
    notes TEXT DEFAULT NULL,
    isWork INTEGER AS Boolean NOT NULL DEFAULT 1,
    isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
    FOREIGN KEY(labelName, isArchived) REFERENCES localLabel(name, isArchived)
    ON UPDATE CASCADE
    ON DELETE SET DEFAULT
);

CREATE INDEX idx_archived ON localSession(isArchived);
CREATE INDEX idx_profile ON localSession(labelName);
CREATE INDEX idx_is_work ON localSession(isWork);

insert:
INSERT OR REPLACE INTO localSession(id, timestamp, duration, interruptions, labelName, notes, isWork, isArchived)
VALUES(NULL, ?, ?, ?, ?, ?, ?, ?);

update:
UPDATE localSession
SET timestamp = :newTimestamp, duration = :newDuration, interruptions = :newInterruptions, labelName = :newLabel, notes = :newNotes
WHERE id = :id;

updateLabelByIds:
UPDATE localSession
SET labelName = :newLabel
WHERE id IN ?;

selectAll:
SELECT *
FROM localSession  ORDER BY timestamp DESC;

selectAfter:
SELECT *
FROM localSession WHERE timestamp > ? ORDER BY timestamp DESC;

selectById:
SELECT *
FROM localSession WHERE id = ?;

selectByIsArchived:
SELECT *
FROM localSession WHERE isArchived IS ? ORDER BY timestamp DESC;

selectByLabel:
SELECT *
FROM localSession WHERE labelName IS ? ORDER BY timestamp DESC;

selectByLabels:
SELECT *
FROM localSession WHERE labelName IN ? ORDER BY timestamp DESC;

selectLastInsertSessionId:
SELECT last_insert_rowid();

delete:
DELETE FROM localSession
WHERE id = ?;

deleteByIds:
DELETE FROM localSession
WHERE id IN ?;

deleteAll:
DELETE FROM localSession;