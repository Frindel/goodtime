import kotlin.Boolean;
import kotlin.Int;

PRAGMA foreign_keys=off;

CREATE TABLE IF NOT EXISTS labelTmp (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL DEFAULT "",
    colorIndex INTEGER NOT NULL,
    orderIndex INTEGER NOT NULL,
    useDefaultTimeProfile INTEGER AS Boolean NOT NULL DEFAULT 1,

    -- countdown columns
    isCountdown INTEGER AS Boolean NOT NULL DEFAULT 1,
    workDuration INTEGER AS Int NOT NULL DEFAULT 25,
    breakDuration INTEGER AS Int NOT NULL DEFAULT 5,
    longBreakDuration INTEGER AS Int NOT NULL DEFAULT 15,
    sessionsBeforeLongBreak INTEGER AS Int NOT NULL DEFAULT 4,

    -- flow column
    workBreakRatio INTEGER AS Int NOT NULL DEFAULT 3,

    isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
    UNIQUE (name, isArchived)
);

INSERT INTO labelTmp(name, colorIndex, orderIndex, isArchived)
SELECT COALESCE(title, ""), colorId, 'order', archived FROM Label;

DROP TABLE Label;
ALTER TABLE labelTmp RENAME TO localLabel;

CREATE TABLE IF NOT EXISTS sessionTmp (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
        startTimestamp INTEGER NOT NULL,
        endTimestamp INTEGER NOT NULL,
        duration INTEGER NOT NULL,
        labelName TEXT DEFAULT NULL,
        notes TEXT DEFAULT NULL,
        isWork INTEGER AS Boolean NOT NULL DEFAULT 1,
        isArchived INTEGER AS Boolean NOT NULL DEFAULT 0,
        FOREIGN KEY(labelName, isArchived) REFERENCES localLabel(name, isArchived)
        ON UPDATE CASCADE
        ON DELETE SET DEFAULT
);

INSERT INTO sessionTmp(id, startTimestamp, endTimestamp, duration, labelName, isArchived)
SELECT `id`, (`timestamp` - (`duration` * 60 * 1000)), timestamp, `duration`, `label`, `archived` FROM Session;
DROP TABLE Session;
ALTER TABLE sessionTmp RENAME TO localSession;

CREATE INDEX idx_archived ON localSession(isArchived);
CREATE INDEX idx_profile ON localSession(labelName);
CREATE INDEX idx_is_work ON localSession(isWork);

PRAGMA foreign_keys=on;

DROP TABLE `Profile`;
DROP TABLE room_master_table;
DROP TABLE android_metadata;
